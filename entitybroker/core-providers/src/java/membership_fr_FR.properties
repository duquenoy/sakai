# this defines the entity description for membership
membership = Repr\u00e9sente l\u2019appartenance d\u2019un utilisateur dans un endroit (espace, groupe, etc.) dans le syst\u00e8me, fonctionne avec des entit\u00e9s de l\u2019espace/groupe et les entit\u00e9s de l\u2019utilisateur. Dans la documentation ci-dessous, un ID de membre est une cha\u00eene sous la forme USER_ID\:\:LOCATION_REFERENCE (par exemple, aaronz\:\:site\:mySiteId).
membership.view.new = (POST) Ajouter le nombre de membres sp\u00e9cifi\u00e9 par l\u2019identifiant (ID). Par ailleurs, un POST \u00e0 la simple URL /membership peut sp\u00e9cifier des param\u00e8tres de demande userId et locationReference. Dans les deux cas, les param\u00e8tres de demande en option sont\: memberRole string (par d\u00e9faut pour l\u2019adh\u00e9sion \u00e0 site joignable est le r\u00f4le de menuisier par d\u00e9faut) ; valeur bool\u00e9enne actif (valeur par d\u00e9faut est true). Peut faire un lot s\u2019ajoute au m\u00eame endroit en utilisant le m\u00eame r\u00f4le en sp\u00e9cifiant un param\u00e8tre ID utilisateur (un tableau de noms d\u2019utilisateurs).
membership.view.delete = (DELETE) Supprimer le membre sp\u00e9cifi\u00e9 par l\u2019identifiant. Les appartenances multiples peuvent \u00eatre supprim\u00e9es au m\u00eame endroit en sp\u00e9cifiant un param\u00e8tre ID utilisateur (un tableau de noms d\u2019identifiants d\u2019utilisateurs).
membership.view.edit = (POST) Modifier l\u2019adh\u00e9sion sp\u00e9cifi\u00e9e par l\u2019ID. Par ailleurs, un POST \u00e0 l\u2019URL /membership peut sp\u00e9cifier des param\u00e8tres userId et locationReference. Dans les deux cas, les param\u00e8tres de demande en option sont\u00a0\: memberRole string; active Boolean value. On peut faire une mise \u00e0 jour par lots au m\u00eame emplacement en utilisant le m\u00eame r\u00f4le et le param\u00e8tre actif en sp\u00e9cifiant un param\u00e8tre userIds (un tableau de IDs d\u2019utilisateurs).
membership.view.list = Par d\u00e9faut, r\u00e9cup\u00e8re une liste de toutes les adh\u00e9sions d\u2019espace pour l\u2019utilisateur actuel. Param\u00e8tres de requ\u00eate facultative\u00a0\: includeSites\=false filtre les adh\u00e9sions de l\u2019espace; includeGroups\=true r\u00e9cup\u00e8re les adh\u00e9sions \u00e0 des groupes \u00a0; \u00a0_locationReference\=LOCATION_REFERENCE retourne toutes les adh\u00e9sions dans l\u2019espace sp\u00e9cifi\u00e9 ou le groupe\u00a0; user\=USER_ID (ou userId\=USER_ID ou _userReference\=USER_REFERENCE) retourne les adh\u00e9sions de l\u2019utilisateur\u00a0donn\u00e9; includeMemberDetails\=true pour renvoyer tous les d\u00e9tails du membre ou juste le r\u00f4le de l\u2019utilisateur, ne peut pas \u00eatre utilis\u00e9 avec includeGroups\=true; role\=ROLE_STRING (ou roleId\=ROLE_STRING) limite la liste au r\u00f4le de membre sp\u00e9cifi\u00e9.
membership.action.site = Le format d\u2019URL est /membership/site/\:SITE_ID\:. <br/> (GET) retournera toutes les adh\u00e9sions de l\u2019espace sp\u00e9cifi\u00e9. <br/> (POST) va ajouter une ou plusieurs adh\u00e9sions d\u2019espace via un tableau de param\u00e8tres de requ\u00eate userSearchValues (chacun d\u2019entre eux \u00e9tant un identifiant d\u2019utilisateur, EID de l\u2019utilisateur, ou adresse de courriel), avec une cha\u00eene de caract\u00e8res memberRole (par d\u00e9faut pour les adh\u00e9sions \u00e0 un espace joignable est le r\u00f4le par d\u00e9faut) et la valeur bool\u00e9enne active (valeur par d\u00e9faut est vraie). Les en-t\u00eates de r\u00e9ponse peuvent inclure x-warning-not-found (pour une liste de valeurs utilisateur non valides) et x-warning-already-members (pour une liste de valeurs userSearchValues qui \u00e9taient d\u00e9j\u00e0 membres de l\u2019espace).
membership.action.sitebyjson = Le format de l\u2019URL est "/membership/sitebyjson/\:SITE_ID\:". <br/> (POST) ajoutera une ou plusieurs appartenances \u00e0 l\u2019espace via un chunk de JSON fourni dans le param\u00e8tre de requ\u00eate \u2019json\u2019.<br/> <br/>Le JSON doit \u00eatre format\u00e9 comme ceci \: <br/> <br/>[ {"id"\: "user1", "role"\: "access"}, {"id"\: "user2", r\u00f4le"\: "maintain"} ]<br/> <br/>Trois en-t\u00eates de r\u00e9ponse seront d\u00e9finis \:<br/> <br/><b>x-success-count</b>, qui contient le nombre d\u2019ajouts r\u00e9ussis<br/> <b>x-warning-not-found</b>, qui contient une liste s\u00e9par\u00e9e par des virgules d\u2019identifiants d\u2019utilisateurs qui n\u2019existait pas<br/>  <b>x-warning-already membres</b>, qui contient une liste s\u00e9par\u00e9e par des virgules des identifiants d\u2019utilisateurs qui \u00e9taient d\u00e9j\u00e0 dans l\u2019espace
membership.action.group = Le format de l\u2019URL est /membership/group/\:groupId\: <br/> (GET) retournera toutes les adh\u00e9sions pour un groupe. <br/> (POST) mettra \u00e0 jour l\u2019appartenance au groupe d\u2019utilisateurs. Param\u00e8tres POST obligatoires \: \u2019userIds\u2019 une liste d\u2019utilisateurs s\u00e9par\u00e9s par des virgules (eid ou id). \u2019action\u2019 peut avoir des valeurs \: mise \u00e0 jour, ajout ou suppression. Si mise \u00e0 jour, remplacez l\u2019adh\u00e9sion actuelle par la liste fournie. Si ajout\u00e9, ajoutez la liste \u00e0 l\u2019appartenance existante, si elle est supprim\u00e9e, retirez la liste de l\u2019appartenance existante. 
membership.action.join = Permet \u00e0 un utilisateur sans autorisation dans un espace de le rejoindre, fonctionne uniquement avec l\u2019utilisateur courant \: /membership/join/site/siteId
membership.action.unjoin = Permet \u00e0 un utilisateur sans autorisation dans un espace de se retirer de lui, fonctionne uniquement avec l\u2019utilisateur courant \: /membership/unjoin/site/siteId
membership.action.fastroles = Permet de r\u00e9cup\u00e9rer rapidement le r\u00f4le actuel dans l\u2019espace. Utilisez le format /membership/fastroles/\:userId\: (ou userEid) ou l\u2019utilisateur actuel si aucun n\u2019est sp\u00e9cifi\u00e9. Un raccourci pour includeMemberDetail\=false.
